# org-workflows/.github/workflows/build-and-publish-ghcr.yml

name: Build and Publish to GHCR

on:
  workflow_call:
    inputs:
      registry_username:
        description: "GHCR Username"
        required: true
        type: string
      registry_password:
        description: "GHCR Password or PAT Token"
        required: true
        type: string
      discord_webhook:
        description: "Discord Webhook URL"
        required: true
        type: string
      repository_name:
        description: "GitHub Repository Name"
        required: true
        type: string
    secrets:
      ORGANIZATION:
        description: "Organization name for GHCR"
      PAT_TOKEN:
        description: "Personal Access Token with GHCR permissions"
      DISCORD_WEBHOOK:
        description: "Discord Webhook URL"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ inputs.registry_username }}
          password: ${{ inputs.registry_password }} # only classic token

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main') }}
          tags: ghcr.io/${{ secrets.ORGANIZATION }}/${{ inputs.repository_name }}:latest

      - name: Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ inputs.discord_webhook }}
          status: ${{ job.status }}
          title: "Build Result for ${{ inputs.repository_name }}"
          description: |
            ${{ job.status != 'success' && format('Failure at stage: {0}', job.status) || 'Build succeeded!' }}
          color: ${{ job.status == 'success' && '0x00ff00' || '0xff0000' }}
